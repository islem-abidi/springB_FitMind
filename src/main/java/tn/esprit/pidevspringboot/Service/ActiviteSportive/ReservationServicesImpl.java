package tn.esprit.pidevspringboot.Service.ActiviteSportive;

import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import tn.esprit.pidevspringboot.Entities.ActiviteSportive.Reservation;
import tn.esprit.pidevspringboot.Entities.ActiviteSportive.Seance_sport;
import tn.esprit.pidevspringboot.Entities.User.User;
import tn.esprit.pidevspringboot.Repository.ActiviteSportive.ReservationRepository;
import tn.esprit.pidevspringboot.Repository.ActiviteSportive.Seance_sportRepository;
import tn.esprit.pidevspringboot.Repository.userRepository;
import tn.esprit.pidevspringboot.Entities.ActiviteSportive.Status;

import java.util.Date;
import java.util.List;


@Service
@AllArgsConstructor
public class ReservationServicesImpl implements IReservationServices {

    @Autowired
    EmailService emailService;

    @Autowired
    ReservationRepository reservationRepository;
    @Autowired
    Seance_sportRepository seanceRepository;
    @Autowired
    userRepository userRepository ;

    @Override
    public List<Reservation> getReservationsByUser(Long userId) {
        return reservationRepository.findByUser_Id(userId);
    }
    @Override
    public Reservation ajouterAListAttente(Long idSeance, Long idUser) {
        Seance_sport seance = seanceRepository.findById(idSeance)
                .orElseThrow(() -> new RuntimeException("S√©ance introuvable"));
        User user = userRepository.findById(idUser)
                .orElseThrow(() -> new RuntimeException("Utilisateur introuvable"));

        Reservation reservation = new Reservation();
        reservation.setSeance(seance);
        reservation.setUser(user);
        reservation.setDateReservation(new Date());
        reservation.setStatus(Status.EN_ATTENTE); // ‚úÖ En attente au d√©part

        Reservation savedReservation = reservationRepository.save(reservation);

        // üì© Email avec lien de confirmation
        String confirmationLink = "http://localhost:4200/activite-off?reservationId=" + savedReservation.getId_reservation();
        String subject = "üéØ Confirmation de votre r√©servation - " + seance.getActivite().getNomActivite();

        String body = "<html><body style='font-family: Arial, sans-serif;'>" +
                "<h2 style='color:#2c3e50;'>Bonjour " + user.getNom() + ",</h2>" +
                "<p>Vous √™tes inscrit(e) en <strong>liste d'attente</strong> pour l'activit√© <strong style='color:#2980b9;'>" +
                seance.getActivite().getNomActivite() + "</strong>.</p>" +
                "<p><strong>üìÖ Date :</strong> " + seance.getDateSeance() + "<br>" +
                "<strong>üïí Heure :</strong> " + seance.getHeureDebut() + "<br>" +
                "<strong>üìç Lieu :</strong> " + seance.getLieu() + "</p>" +
                "<hr>" +
                "<p style='color:#e67e22;'>üëâ Une place se lib√®re ? Vous pouvez confirmer votre participation ici :</p>" +
                "<p><a href='" + confirmationLink + "' style='padding:10px 20px;background-color:#27ae60;color:white;text-decoration:none;border-radius:5px;'>Confirmer ma r√©servation</a></p>" +
                "<br><p>Merci et √† bient√¥t üëã<br>L'√©quipe Activit√© Sportive</p>" +
                "</body></html>";


        emailService.sendConfirmationEmail(user.getEmail(), subject, body);

        return savedReservation;
    }


    @Override
    public String confirmerReservationParUtilisateur(Long reservationId) {
        System.out.println("üîî Tentative de confirmation pour la r√©servation ID : " + reservationId);

        Reservation reservation = reservationRepository.findById(reservationId)
                .orElseThrow(() -> {
                    System.out.println("‚ùå R√©servation introuvable.");
                    return new RuntimeException("R√©servation introuvable");
                });

        if (reservation.getStatus() == Status.CONFIRMEE) {
            System.out.println("‚ÑπÔ∏è R√©servation d√©j√† confirm√©e.");
            return "R√©servation d√©j√† confirm√©e.";
        }

        Seance_sport seance = reservation.getSeance();

        if (seance.getCapaciteDispo() <= 0) {
            System.out.println("‚ùå Plus de places disponibles pour confirmer la r√©servation.");
            return "Erreur : Plus de places disponibles.";
        }

        // ‚úÖ Confirmation
        reservation.setStatus(Status.CONFIRMEE);
        reservationRepository.save(reservation);

        seance.setCapaciteDispo(seance.getCapaciteDispo() - 1);
        seanceRepository.save(seance);

        System.out.println("‚úÖ R√©servation confirm√©e avec succ√®s pour l'utilisateur : " + reservation.getUser().getNom());
        System.out.println("üì§ Pr√©paration de l'envoi du 2e e-mail √† : " + reservation.getUser().getEmail());


        // Email de confirmation
        String subject = "üéâ R√©servation Confirm√©e - " + seance.getActivite().getNomActivite();

        String body = "<html><body style='font-family: Arial, sans-serif;'>" +
                "<h2 style='color:#2c3e50;'>Bonjour " + reservation.getUser().getNom() + ",</h2>" +
                "<p>üëè Votre r√©servation pour l'activit√© <strong style='color:#2980b9;'>" + seance.getActivite().getNomActivite() + "</strong> est maintenant <strong style='color:green;'>confirm√©e</strong>.</p>" +
                "<p><strong>üìÖ Date :</strong> " + seance.getDateSeance() + "<br>" +
                "<strong>üïí Heure :</strong> " + seance.getHeureDebut() + "<br>" +
                "<strong>üìç Lieu :</strong> " + seance.getLieu() + "</p>" +
                "<hr>" +
                "<p style='font-style: italic; color: #555;'>Merci de votre confiance ! Pr√©parez-vous √† bouger ! üí™</p>" +
                "<p>L'√©quipe <strong>Activit√© Sportive</strong></p>" +
                "</body></html>";

        emailService.sendConfirmationEmail(
                reservation.getUser().getEmail(),
                subject,
                body
        );


        return "R√©servation confirm√©e avec succ√®s.";
    }



    @Override
    public List<Reservation> getListeAttente(Long seanceId) {
        return reservationRepository.findBySeance_IdAndStatusOrderByDateReservationAsc(seanceId, Status.EN_ATTENTE);
    }

    @Override
    public void confirmerProchaineReservation(Long seanceId) {
        List<Reservation> enAttente = reservationRepository.findBySeance_IdAndStatusOrderByDateReservationAsc(seanceId, Status.EN_ATTENTE);
        if (!enAttente.isEmpty()) {
            Reservation reservation = enAttente.get(0);
            reservation.setStatus(Status.CONFIRMEE);
            reservationRepository.save(reservation);

            // TODO: notifier l'utilisateur (email / sms / etc.)
        }
    }


    @Override
    public String annulerReservation(Long reservationId) {
        Reservation reservation = reservationRepository.findById(reservationId)
                .orElseThrow(() -> new RuntimeException("R√©servation introuvable"));

        if (reservation.getStatus() == Status.ANNULEE) {
            return "D√©j√† annul√©e.";
        }

        reservation.setStatus(Status.ANNULEE);
        reservationRepository.save(reservation);

        // Remettre une place dispo
        Seance_sport seance = reservation.getSeance();
        seance.setCapaciteDispo(seance.getCapaciteDispo() + 1);
        seanceRepository.save(seance);

        // (Optionnel) Envoyer un email √† l‚Äôutilisateur
        emailService.sendConfirmationEmail(
                reservation.getUser().getEmail(),
                "R√©servation annul√©e",
                "Votre r√©servation du " + seance.getDateSeance() + " a √©t√© annul√©e."
        );

        return "R√©servation annul√©e avec succ√®s.";
    }

}
